name: "IFC schema check"

on:
  pull_request:
    branches:
      - master

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      hasifcs: ${{ steps.check_results.outputs.HASIFCS }}
      modifcs: ${{ steps.check_results.outputs.MODIFCS }}
      addifcs: ${{ steps.check_results.outputs.ADDEDIFCS }}
      addjson: ${{ steps.file_changes.outputs.files_added }}
      modjson: ${{ steps.file_changes.outputs.files_modified }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Filter only changed files
        id: file_changes
        uses: trilom/file-changes-action@v1.2.4
      - name: Logging
        run: |
          echo 'All files:'
          cat $HOME/files.json ; echo
          echo 'Modified files:'
          cat $HOME/files_modified.json ; echo
          echo 'Added files:'
          cat $HOME/files_added.json ; echo
          echo 'Removed files:'
          cat $HOME/files_removed.json ; echo
          echo 'Files: ' '${{ steps.file_changes.outputs.files}}'
          echo 'Modified: ''${{ steps.file_changes.outputs.files_modified}}'
          echo 'Added: ''${{ steps.file_changes.outputs.files_added}}'
          echo 'Removed: ''${{ steps.file_changes.outputs.files_removed}}'
      - name: Check for IFC changes
        id: check_results
        run: |
          if [[ $HOME/files.json ]] && cat $HOME/files.json | grep -q .ifc; then 
            echo ::set-output name=HASIFCS::true; 
            echo ::set-output name=ALL::$HOME/files.json; 
            echo 'IFC changes determined!';
          else 
            echo ::set-output name=HASIFCS::false; 
            echo 'No IFC changes determined!';
          fi
          if [[ $HOME/files_modified.json ]] && cat $HOME/files_modified.json | grep -q .ifc; then 
            echo ::set-output name=MODIFCS::true; 
            echo ::set-output name=MOD::$HOME/files_modified.json; 
            echo 'IFC modifications determined!';
          else 
            echo ::set-output name=MODIFCS::false; 
            echo 'No IFC modifications determined!';
          fi
          if [[ $HOME/files_added.json ]] && cat $HOME/files_added.json | grep -q .ifc; then 
            echo ::set-output name=ADDEDIFCS::true; 
            echo ::set-output name=ADD::$HOME/files_added.json; 
            echo 'IFC additions determined!';
          else 
            echo ::set-output name=ADDEDIFCS::false; 
            echo 'No IFC additions determined!';
          fi
  check:
    runs-on: windows-latest
    needs: filter
    if: ${{ needs.filter.outputs.hasifcs == 'true' }}
    defaults:
      run:
        shell: pwsh
    outputs:
      haslogs: ${{ steps.results.outputs.haslogs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Verify the workspace context
        run: echo 'Workspace directory is ${{ github.workspace }}'
      - uses: suisei-cn/actions-download-file@v1
        id: downloadfile  # Remember to give an ID if you need the output
        name: Download the file
        with:
          url: "https://bwsyncandshare.kit.edu/s/3morKMDHr6fciP5/download"
          target: download
      - name: Logging location
        run: |
          dir .
          dir download/
      - name: Unzip the checker
        run: |
          Rename-Item -Path "${{ github.workspace}}/download/${{ steps.downloadfile.outputs.filename }}" -NewName "${{ steps.downloadfile.outputs.filename }}.zip"
          Expand-Archive -LiteralPath "${{ github.workspace}}/download/${{ steps.downloadfile.outputs.filename }}.zip" -DestinationPath "${{ github.workspace}}/checker"
      - name: Logging checker directory
        run: |
          dir checker
      - name: Prepare check results
        if: needs.filter.outputs.modifcs == 'true' || needs.filter.outputs.addifcs == 'true'
        run: |
          mkdir results
          Copy-Item "${{ github.workspace }}/checker/MVDChecker.xsl" -Destination "${{ github.workspace }}/results/MVDChecker.xsl"
      - name: Check added files
        if: needs.filter.outputs.addifcs == 'true'
        run: |
          $data = '${{ needs.filter.outputs.addjson }}' | ConvertFrom-Json
          $cmnd = "${{ github.workspace }}\checker\ifcCheckingTool_Lite.exe"
          foreach( $i in $data ) {
            $filename = $("$i").Substring($("$i").LastIndexOf("/")+1)
            Write-Host "Checking filename:" "$("$filename")" " --> writing to" "$("${{ github.workspace }}\results\$filename.xml")"
            Write-Host "Running:" "${{ github.workspace }}\checker\ifcCheckingTool_Lite.exe" "$("${{ github.workspace }}\$i")" /hidegui /xmlfile="$("${{ github.workspace }}\results\$filename.xml")"
            $ifcFilePath = $("${{ github.workspace }}\$i")
            $xmlFilePath = $("${{ github.workspace }}\results\$filename.xml")
            & $cmnd $ifcFilePath /hidegui /xmlfile=$xmlFilePath
            Write-Host "Last exit code was:" $?
            Copy-Item $("$ifcFilePath") -Destination $("${{ github.workspace }}/results/$i")
          }
      - name: Check modified files
        if: needs.filter.outputs.modifcs == 'true'
        run: |
          $data = '${{ needs.filter.outputs.modjson }}' | ConvertFrom-Json
          $cmnd = "${{ github.workspace }}\checker\ifcCheckingTool_Lite.exe"
          foreach( $i in $data ) {
            $filename = $("$i").Substring($("$i").LastIndexOf("/")+1)
            Write-Host "Checking filename:" "$("$filename")" " --> writing to" "$("${{ github.workspace }}\results\$filename.xml")"
            Write-Host "Running:" "${{ github.workspace }}\checker\ifcCheckingTool_Lite.exe" "$("${{ github.workspace }}\$i")" /hidegui /xmlfile="$("${{ github.workspace }}\results\$filename.xml")"
            $ifcFilePath = $("${{ github.workspace }}\$i")
            $xmlFilePath = $("${{ github.workspace }}\results\$filename.xml")
            & $cmnd $ifcFilePath /hidegui /xmlfile=$xmlFilePath
            Write-Host "Last exit code was:" $LASTEXITCODE
            Copy-Item $ifcFilePath -Destination $("${{ github.workspace }}/results/$i")
          }
      - name: Analyse results directory
        id: results
        if: always()
        run: |
          dir results
          $noOfResults = ( Get-ChildItem results | Measure-Object ).Count;
          if($noOfResults -ge 2){
            echo "::set-output name=haslogs::true"
          } else {
            echo "::set-output name=haslogs::false"        
          }
      - name: Upload check results
        if: (needs.filter.outputs.modifcs == 'true' || needs.filter.outputs.addifcs == 'true') && steps.results.outputs.haslogs == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: checking_results
          path: ${{ github.workspace }}\results
  validate:
    runs-on: windows-latest
    needs: check
    if: needs.check.outputs.haslogs == 'true'
    steps:
      - name: Load log files from check
        uses: actions/download-artifact@v2
        with:
          name: checking_results
          path: results
      - name: Dir files
        run: |
          dir .
          dir results
      - name: Parse logs
        id: counting
        run: |
          $total = 0
          $error_elements = "//MVDReport.MVDMessageSet"
          Get-ChildItem results -Filter "*.xml" | 
          Foreach-Object {
            [System.Xml.XmlDocument] $document = New-Object System.Xml.XmlDocument
            $document.load($_.FullName)
            $found_elements = $document.selectnodes($element_xpath)
            Write-Host $found_elements.count.ToString("n0") elements in $_.Name
          }
          if( $total -ge 1 ) {
            echo "::set-output name=logging::true"
          } else {
            echo "::set-output name=logging::false"            
          }
      - name: Fail validation
        uses: actions/github-script@v3
        if: steps.counting.outputs.logging == 'true'
        with:
          script: |
            core.setFailed('There have been error messages')


